{
  "fileTypes": [
    "cvc4"
  ],
  "name": "CVC4",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#command"
    },
    {
      "include": "#type_decl"
    },
    {
      "include": "#type_def"
    },
    {
      "include": "#datatype_def"
    },
    {
      "include": "#symbol_def_or_decl"
    }
  ],
  "repository": {
    "arith_consts": {
      "patterns": [
        {
          "captures": {
            "2": {
              "name": "invalid.cvc4"
            },
            "3": {
              "name": "invalid.cvc4"
            }
          },
          "match": "\\b(0|[1-9]\\d*)(\\.\\d*)\\s*/\\s*[1-9]\\d*(\\.\\d*)",
          "name": "constant.other.cvc4"
        },
        {
          "captures": {
            "2": {
              "name": "invalid.cvc4"
            }
          },
          "match": "\\b(0|[1-9]\\d*)\\s*/\\s*[1-9]\\d*(\\.\\d*)",
          "name": "constant.other.cvc4"
        },
        {
          "captures": {
            "2": {
              "name": "invalid.cvc4"
            }
          },
          "match": "\\b(0|[1-9]\\d*)(\\.\\d*)\\s*/\\s*[1-9]\\d*",
          "name": "constant.other.cvc4"
        },
        {
          "captures": {
            "2": {
              "name": "invalid.cvc4"
            }
          },
          "match": "\\b(0|[1-9]\\d*)\\s*(/\\s*0(\\.0*)?)\\b",
          "name": "constant.other.cvc4"
        },
        {
          "match": "\\b(0|[1-9]\\d*)\\s*/\\s*[1-9]\\d*\\b",
          "name": "constant.other.cvc4"
        },
        {
          "match": "\\b(0|[1-9]\\d*)(\\.\\d*|\\b)",
          "name": "constant.other.cvc4"
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "begin": "\\b(CONTINUE|COUNTEREXAMPLE|COUNTERMODEL|POP|PUSH|WHERE)\\b",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "comment": "Commands with no arguments.",
          "end": ";"
        },
        {
          "begin": "\\bOPTION\\b",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "end": ";",
          "patterns": [
            {
              "begin": "\"",
              "end": "\"",
              "name": "constant.numeric.cvc4"
            },
            {
              "include": "#integer"
            }
          ]
        },
        {
          "begin": "\\b(ECHO|INCLUDE|TRACE|UNTRACE)\\b",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "end": ";",
          "patterns": [
            {
              "begin": "\"",
              "end": "\"",
              "name": "constant.numeric.cvc4"
            }
          ]
        },
        {
          "begin": "\\bPOPTO\\b",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "end": ";",
          "patterns": [
            {
              "include": "#integer"
            }
          ]
        },
        {
          "begin": "\\b(ASSERT|QUERY|RESTART|PRINT|TRANSFORM)\\b",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "end": ";",
          "patterns": [
            {
              "include": "#expr"
            }
          ]
        }
      ]
    },
    "comment": {
      "match": "%.*",
      "name": "comment.cvc4"
    },
    "datatype_def": {
      "begin": "\\b(DATATYPE)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.cvc4"
        }
      },
      "comment": "The last line can end with a ','. So we match for an optional 'END'.",
      "end": "(END)?;",
      "endCaptures": {
        "1": {
          "name": "keyword.cvc4"
        }
      },
      "patterns": [
        {
          "begin": "\\b([a-zA-Z]\\w*)\\s*((\\[)\\s*([a-zA-Z]\\w*)(\\s*(,)\\s*([a-zA-Z]\\w*))*\\s*(\\]))?\\s*=",
          "beginCaptures": {
            "1": {
              "name": "support.type.cvc4"
            },
            "2": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "A declaration finishes either by ',' or 'END'.",
          "end": "(,|(END)){1,1}?",
          "endCaptures": {
            "2": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#datatype_def_cij"
            }
          ]
        }
      ]
    },
    "datatype_def_cij": {
      "patterns": [
        {
          "begin": "\\b([a-zA-Z]\\w*)\\s*\\(",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "comment": "Constructor.",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#identifier_colored_colon"
            },
            {
              "include": "#type"
            },
            {
              "match": ",",
              "name": "keyword.cvc4"
            }
          ]
        },
        {
          "comment": "Constant symbol.",
          "match": "\\b[a-zA-Z]\\w*\\b",
          "name": "constant.other.cvc4"
        }
      ]
    },
    "equal_fail": {
      "match": "=",
      "name": "invalid.cvc4"
    },
    "expr": {
      "comment": "A lambda or something else.",
      "patterns": [
        {
          "begin": "\\bLAMBDA\\s*\\(",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Actually, just the signature of a lambda.",
          "end": "\\)\\s*:",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "begin": "(?<=:)",
              "beginCaptures": {
                "0": {
                  "name": "constant.other.cvc4"
                }
              },
              "end": ",|(?=\\))",
              "endCaptures": {
                "0": {
                  "name": "constant.other.cvc4"
                }
              },
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            {
              "include": "#identifiers_colored_colon"
            }
          ]
        },
        {
          "include": "#expr_sub"
        }
      ]
    },
    "expr_sub": {
      "comment": "Anything but a lambda.",
      "patterns": [
        {
          "include": "#arith_consts"
        },
        {
          "comment": "Common operators.",
          "match": "\\b(AND|OR|NOT|IF|THEN|ELSE|ELSIF|ENDIF)\\b|:=",
          "name": "keyword.cvc4"
        },
        {
          "begin": "\\bLET\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Let binding.",
          "end": "\\bIN\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#identifier_colored_equal"
            },
            {
              "include": "#expr_sub"
            }
          ]
        },
        {
          "begin": "\\b(FORALL|EXISTS)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Forall / exists.",
          "end": "\\)",
          "patterns": [
            {
              "begin": "(?<=:)",
              "beginCaptures": {
                "0": {
                  "name": "constant.other.cvc4"
                }
              },
              "end": ",|(?=\\))",
              "endCaptures": {
                "0": {
                  "name": "constant.other.cvc4"
                }
              },
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            {
              "include": "#identifiers_colored_colon"
            }
          ]
        },
        {
          "begin": "\\bPATTERN\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Instantiation patterns.",
          "end": ":",
          "patterns": [
            {
              "include": "#expr_sub"
            }
          ]
        },
        {
          "begin": "\\b([a-zA-Z]\\w*)\\s*\\(",
          "beginCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "comment": "Function application.",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "constant.other.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#identifier_colored_colon"
            },
            {
              "include": "#expr_sub"
            },
            {
              "match": ",",
              "name": "keyword.cvc4"
            }
          ]
        },
        {
          "comment": "Update.",
          "match": "\\bWITH\\b",
          "name": "constant.other.cvc4"
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "constant.numeric.cvc4"
            }
          },
          "comment": "Other parts of an update.",
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "constant.numeric.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#expr_sub"
            }
          ]
        },
        {
          "begin": "\\b([a-zA-Z]\\w*)\\s*(\\[)",
          "beginCaptures": {
            "2": {
              "name": "constant.numeric.cvc4"
            }
          },
          "comment": "Selection.",
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "constant.numeric.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#identifier_colored_colon"
            },
            {
              "include": "#expr_sub"
            },
            {
              "match": ",",
              "name": "keyword.cvc4"
            }
          ]
        },
        {
          "begin": "\\(#",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Record construction.",
          "end": "#\\)",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#identifier_colored_colon"
            },
            {
              "include": "#expr_sub"
            }
          ]
        },
        {
          "comment": "Record selection.",
          "match": "\\.",
          "name": "constant.numeric.cvc4"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#expr_sub"
            }
          ]
        },
        {
          "include": "#identifier"
        },
        {
          "match": ","
        }
      ]
    },
    "identifier": {
      "match": "\\b[a-zA-Z]\\w*\\b"
    },
    "identifier_colored": {
      "match": "\\b[a-zA-Z]\\w*\\b",
      "name": "constant.numeric.cvc4"
    },
    "identifier_colored_colon": {
      "captures": {
        "1": {
          "name": "constant.numeric.cvc4"
        }
      },
      "match": "\\b([a-zA-Z]\\w*)\\s*:"
    },
    "identifier_colored_equal": {
      "captures": {
        "1": {
          "name": "constant.numeric.cvc4"
        }
      },
      "match": "\\b([a-zA-Z]\\w*)\\s*="
    },
    "identifiers_colored_colon": {
      "begin": "\\b([a-zA-Z]\\w*)\\b",
      "beginCaptures": {
        "1": {
          "name": "constant.numeric.cvc4"
        }
      },
      "comment": "Starts a symbol definition / declaration or a lambda signature.",
      "end": ":",
      "patterns": [
        {
          "include": "#identifier_colored"
        }
      ]
    },
    "integer": {
      "match": "\\b(0|[1-9][0-9]*)\\b",
      "name": "constant.other.cvc4"
    },
    "semicolon_fail": {
      "match": ";",
      "name": "invalid.cvc4"
    },
    "symbol_def_expr_end": {
      "begin": "(?<==)",
      "end": "(?=;)",
      "patterns": [
        {
          "include": "#expr"
        }
      ]
    },
    "symbol_def_or_decl": {
      "begin": "\\b(([a-zA-Z]\\w*)(\\s*,\\s*[a-zA-Z]\\w*)*)\\s*:",
      "beginCaptures": {
        "1": {
          "name": "constant.numeric.cvc4"
        }
      },
      "end": ";",
      "patterns": [
        {
          "include": "#symbol_def_or_decl_type"
        },
        {
          "include": "#symbol_def_expr_end"
        },
        {
          "include": "#identifier_colored"
        }
      ]
    },
    "symbol_def_or_decl_type": {
      "begin": "(?<=:)",
      "end": "(=|(?=;)){1,1}?",
      "patterns": [
        {
          "include": "#type"
        }
      ]
    },
    "type": {
      "comment": "Color user types only at top level.",
      "patterns": [
        {
          "include": "#type_sub"
        },
        {
          "include": "#user_type_colored"
        }
      ]
    },
    "type_decl": {
      "captures": {
        "1": {
          "name": "support.type.cvc4"
        },
        "3": {
          "name": "keyword.cvc4"
        },
        "4": {
          "name": "support.type.cvc4"
        },
        "5": {
          "name": "keyword.cvc4"
        }
      },
      "comment": "User-defined basic types.",
      "match": "([a-zA-Z]\\w*)(\\s*(,)\\s*([a-zA-Z]\\w*))*\\s*:\\s*(TYPE)\\s*;"
    },
    "type_def": {
      "begin": "([a-zA-Z]\\w*)\\s*:\\s*(TYPE)\\s*=",
      "beginCaptures": {
        "1": {
          "name": "support.type.cvc4"
        },
        "2": {
          "name": "keyword.cvc4"
        }
      },
      "comment": "Type definitions.",
      "end": ";",
      "patterns": [
        {
          "include": "#type"
        },
        {
          "include": "#equal_fail"
        },
        {
          "include": "#semicolon_fail"
        }
      ]
    },
    "type_sub": {
      "comment": "Actual types. User types appearing in parametric types are not colored.",
      "patterns": [
        {
          "comment": "Primitive types.",
          "match": "\\b(BOOLEAN|REAL|INT)\\b",
          "name": "support.type.cvc4"
        },
        {
          "begin": "\\bBITVECTOR\\s*\\(",
          "comment": "Bitvectors.",
          "end": "\\)",
          "name": "support.type.cvc4",
          "patterns": [
            {
              "include": "#integer"
            },
            {
              "comment": "Anything else is invalid.",
              "match": "[^\\s\\)]+",
              "name": "invalid.cvc4"
            }
          ]
        },
        {
          "begin": "\\bARRAY\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Arrays.",
          "end": "\\bOF\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#type_sub"
            }
          ]
        },
        {
          "begin": "\\b([a-zA-Z]\\w*)\\s*(\\[)",
          "beginCaptures": {
            "1": {
              "name": "support.type"
            },
            "2": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Parametric types.",
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#type_sub"
            }
          ]
        },
        {
          "begin": "\\[#",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Records.",
          "end": "#\\]",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "match": ",",
              "name": "keyword.cvc4"
            },
            {
              "include": "#identifier_colored_colon"
            },
            {
              "include": "#type_sub"
            },
            {
              "include": "#user_type"
            }
          ]
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "Tuples.",
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "match": ",",
              "name": "keyword.cvc4"
            },
            {
              "include": "#type_sub"
            },
            {
              "include": "#user_type"
            }
          ]
        },
        {
          "comment": "_ -> _ functions, coloring only arrow. No begin, no end. Can't do better without tedious repetitions.",
          "match": "\\->",
          "name": "keyword.cvc4"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "comment": "(_, _ [, _]*) -> _ functions, lhs part. Also accepts (SomeType).",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "keyword.cvc4"
            }
          },
          "patterns": [
            {
              "include": "#type_sub"
            },
            {
              "include": "#user_type"
            },
            {
              "match": ",",
              "name": "keyword.cvc4"
            }
          ]
        }
      ]
    },
    "user_type": {
      "match": "\\b[a-zA-Z]\\w*\\b"
    },
    "user_type_colored": {
      "match": "\\b[a-zA-Z]\\w*\\b",
      "name": "support.type.cvc4"
    }
  },
  "scopeName": "cvc",
  "uuid": "78cd77a2-17ef-40e5-a0fb-416644265f70"
}